<?php
/* Copyright (C) 2007-2017 Laurent Destailleur  <eldy@users.sourceforge.net>
 * Copyright (C) ---Put here your own copyright and developer email---
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

/**
 *      \file       buypricehistory_list.php
 *      \ingroup    buypricehistory
 *      \brief      List page for buypricehistory
 */

// Load Dolibarr environment
$res = 0;
// Try main.inc.php into web root known defined into CONTEXT_DOCUMENT_ROOT (not always defined)
if (!$res && !empty($_SERVER["CONTEXT_DOCUMENT_ROOT"])) {
    $res = @include $_SERVER["CONTEXT_DOCUMENT_ROOT"] . "/main.inc.php";
}
// Try main.inc.php into web root detected using web root calculated from SCRIPT_FILENAME
$tmp = empty($_SERVER['SCRIPT_FILENAME']) ? '' : $_SERVER['SCRIPT_FILENAME'];
$tmp2 = realpath(__FILE__);
$i = strlen($tmp) - 1;
$j = strlen($tmp2) - 1;
while ($i > 0 && $j > 0 && isset($tmp[$i]) && isset($tmp2[$j]) && $tmp[$i] == $tmp2[$j]) {
    $i--;
    $j--;
}
if (!$res && $i > 0 && file_exists(substr($tmp, 0, ($i + 1)) . "/main.inc.php")) {
    $res = @include substr($tmp, 0, ($i + 1)) . "/main.inc.php";
}
if (!$res && $i > 0 && file_exists(dirname(substr($tmp, 0, ($i + 1))) . "/main.inc.php")) {
    $res = @include dirname(substr($tmp, 0, ($i + 1))) . "/main.inc.php";
}
// Try main.inc.php using relative path
if (!$res && file_exists("../main.inc.php")) {
    $res = @include "../main.inc.php";
}
if (!$res && file_exists("../../main.inc.php")) {
    $res = @include "../../main.inc.php";
}
if (!$res && file_exists("../../../main.inc.php")) {
    $res = @include "../../../main.inc.php";
}
if (!$res) {
    die("Include of main fails");
}

require_once DOL_DOCUMENT_ROOT . '/core/class/html.formcompany.class.php';
require_once DOL_DOCUMENT_ROOT . '/core/lib/date.lib.php';
require_once DOL_DOCUMENT_ROOT . '/core/lib/company.lib.php';

// load buypricehistory libraries
require_once __DIR__ . '/class/buypricehistory.class.php';

// Load translation files required by the page
$langs->loadLangs(array("buypricehistory@buypricehistory", "other"));
$langs->loadLangs(array('products', 'suppliers', 'bills', 'margins', 'stocks'));

$action     = GETPOST('action', 'aZ09') ? GETPOST('action', 'aZ09') : 'view'; // The action 'add', 'create', 'edit', 'update', 'view', ...
$massaction = GETPOST('massaction', 'alpha'); // The bulk action (combo box choice into lists)
$show_files = GETPOST('show_files', 'int'); // Show files area generated by bulk actions ?
$confirm    = GETPOST('confirm', 'alpha'); // Result of a confirmation
$cancel     = GETPOST('cancel', 'alpha'); // We click on a Cancel button
$toselect   = GETPOST('toselect', 'array'); // Array of ids of elements selected into a list
$contextpage = GETPOST('contextpage', 'aZ') ? GETPOST('contextpage', 'aZ') : 'buypricehistorylist'; // To manage different context of search
$backtopage = GETPOST('backtopage', 'alpha'); // Go back to a dedicated page
$optioncss  = GETPOST('optioncss', 'aZ'); // Option for the css output (always '' except when 'print')

$id = GETPOST('id', 'int');
$ref = GETPOST('ref', 'alpha');
// Load variable for pagination
$limit = GETPOST('limit', 'int') ? GETPOST('limit', 'int') : $conf->liste_limit;
$sortfield = GETPOST('sortfield', 'aZ09comma');
$sortorder = GETPOST('sortorder', 'aZ09comma');
$page = GETPOSTISSET('pageplusone') ? (GETPOST('pageplusone') - 1) : GETPOST("page", 'int');
if (empty($page) || $page < 0 || GETPOST('button_search', 'alpha') || GETPOST('button_removefilter', 'alpha')) {
    $page = 0;
}     // If $page is not defined, or '' or -1 or if we click on clear filters
$offset = $limit * $page;
$pageprev = $page - 1;
$pagenext = $page + 1;

// Initialize technical objects
$object = new BuyPriceHistory($db);
$extrafields = new ExtraFields($db);
$diroutputmassaction = $conf->buypricehistory->dir_output . '/temp/massgeneration/' . $user->id;

$product = new ProductFournisseur($db);
if ($id > 0 || $ref) {
    $product->fetch($id, $ref);
}
$hookmanager->initHooks(array('buypricehistorylist')); // Note that conf->hooks_modules contains array

// Fetch optionals attributes and labels
$extrafields->fetch_name_optionals_label($object->table_element);
$search_array_options = $extrafields->getOptionalsFromPost($object->table_element, '', 'search_');

// Default sort order (if not yet defined by previous GETPOST)
if (!$sortfield) {
    reset($object->fields);
    $sortfield = "t." . key($object->fields);
}   // Set here default search field. By default 1st field in definition. Reset is required to avoid key() to return null.
if (!$sortorder) {
    $sortorder = "ASC";
}

// Initialize array of search criterias
$search_all = GETPOST('search_all', 'alphanohtml') ? GETPOST('search_all', 'alphanohtml') : GETPOST('sall', 'alphanohtml');
$search = array();
foreach ($object->fields as $key => $val) {
    if (GETPOST('search_' . $key, 'alpha') !== '') {
        $search[$key] = GETPOST('search_' . $key, 'alpha');
    }
}

// List of fields to search into when doing a "search in all"
$fieldstosearchall = array();
foreach ($object->fields as $key => $val) {
    if ($val['searchall']) {
        $fieldstosearchall['t.' . $key] = $val['label'];
    }
}

// Definition of array of fields for columns
$arrayfields = array();
foreach ($object->fields as $key => $val) {
    // If $val['visible']==0, then we never show the field
    if (!empty($val['visible'])) {
        $visible = (int) dol_eval($val['visible'], 1);
        $arrayfields['t.' . $key] = array(
            'label' => $val['label'],
            'checked' => (($visible < 0) ? 0 : 1),
            'enabled' => ($visible != 3 && dol_eval($val['enabled'], 1)),
            'position' => $val['position'],
            'help' => $val['help']
        );
    }
}

$arrayfields = array(
    't.begin_date' => array('label' => $langs->trans("AppliedPricesFrom"), 'checked' => 1, 'position' => 1),
    't.end_date' => array('label' => $langs->trans("BuyPriceHistoryAppliedPricesTo"), 'checked' => 1, 'position' => 1),
    't.fk_soc' => array('label' => $langs->trans("Suppliers"), 'checked' => 1, 'position' => 2),
    't.ref_fourn' => array('label' => $langs->trans("SupplierRef"), 'enabled' => 1, 'checked' => 1, 'position' => 3),
    't.fk_availability' => array('label' => $langs->trans("Availability"), 'enabled' => !empty($conf->global->FOURN_PRODUCT_AVAILABILITY), 'checked' => 1, 'position' => 4),
    't.quantity' => array('label' => $langs->trans("QtyMin"), 'checked' => 1, 'position' => 5),
    't.tva_tx' => array('label' => $langs->trans("VATRate"), 'enabled' => 1, 'checked' => 1, 'position' => 6),
    't.price' => array('label' => $langs->trans("PriceQtyMinHT"), 'enabled' => 1, 'checked' => 1, 'position' => 7),
    't.multicurrency_price' => array('label' => $langs->trans("PriceQtyMinHTCurrency"), 'enabled' => !empty($conf->multicurrency->enabled), 'checked' => 1, 'position' => 8),
    't.unitprice' => array('label' => $langs->trans("UnitPriceHT"), 'checked' => 1, 'position' => 9),
    't.multicurrency_unitprice' => array('label' => $langs->trans("UnitPriceHTCurrency"), 'enabled' => !empty($conf->multicurrency->enabled), 'checked' => 1, 'position' => 10),
    't.remise_percent' => array('label' => $langs->trans("DiscountQtyMin"), 'enabled' => $conf->multicurrency->enabled, 'checked' => 1, 'position' => 11),
    't.delivery_time_days' => array('label' => $langs->trans("NbDaysToDelivery"), 'checked' => 0, 'position' => 13),
    't.supplier_reputation' => array('label' => $langs->trans("ReputationForThisProduct"), 'checked' => 0, 'position' => 14),
    't.barcode' => array('label' => $langs->trans("BarcodeValue"), 'enabled' => $conf->barcode->enabled, 'checked' => 0, 'position' => 15),
    't.fk_barcode_type' => array('label' => $langs->trans("BarcodeType"), 'enabled' => $conf->barcode->enabled, 'checked' => 0, 'position' => 16),
    't.packaging' => array('label' => $langs->trans("PackagingForThisProduct"), 'enabled' => !empty($conf->global->PRODUCT_USE_SUPPLIER_PACKAGING), 'checked' => 0, 'position' => 17),
    't.original_fk_user' => array('label' => $langs->trans("User"), 'enabled' => 1, 'checked' => 0, 'position' => 17),
);

foreach ($arrayfields as $key => $value) {
    if (!$arrayfields[$key]['enabled']) {
        $arrayfields[$key]['checked'] = 0;
    }
}

// Extra fields
include DOL_DOCUMENT_ROOT . '/core/tpl/extrafields_list_array_fields.tpl.php';

$object->fields = dol_sort_array($object->fields, 'position');
$arrayfields = dol_sort_array($arrayfields, 'position');

$permissiontoread = $user->rights->buypricehistory->buypricehistory->read;
$permissiontoadd = $user->rights->buypricehistory->buypricehistory->write;
$permissiontodelete = $user->rights->buypricehistory->buypricehistory->delete;

// Security check
if (empty($conf->buypricehistory->enabled)) {
    accessforbidden('Module not enabled');
}
$socid = 0;
if ($user->socid > 0 || !$product->id) {  // Protection if external user
    accessforbidden();
}
$result = restrictedArea($user, 'buypricehistory', '', '', 'buypricehistory');
if (!$permissiontoread) {
    accessforbidden();
}



/*
 * Actions
 */

if (GETPOST('cancel', 'alpha')) {
    $action = 'list';
    $massaction = '';
}
if (!GETPOST('confirmmassaction', 'alpha') && $massaction != 'presend' && $massaction != 'confirm_presend') {
    $massaction = '';
}

$parameters = array();
$reshook = $hookmanager->executeHooks('doActions', $parameters, $object, $action); // Note that $action and $object may have been modified by some hooks
if ($reshook < 0) {
    setEventMessages($hookmanager->error, $hookmanager->errors, 'errors');
}

if (empty($reshook)) {
    // Selection of new fields
    include DOL_DOCUMENT_ROOT . '/core/actions_changeselectedfields.inc.php';

    // Purge search criteria
    if (GETPOST('button_removefilter_x', 'alpha') || GETPOST('button_removefilter.x', 'alpha') || GETPOST('button_removefilter', 'alpha')) { // All tests are required to be compatible with all browsers
        foreach ($object->fields as $key => $val) {
            $search[$key] = '';
        }
        $toselect = '';
        $search_array_options = array();
    }
    if (GETPOST('button_removefilter_x', 'alpha') || GETPOST('button_removefilter.x', 'alpha') || GETPOST('button_removefilter', 'alpha')
        || GETPOST('button_search_x', 'alpha') || GETPOST('button_search.x', 'alpha') || GETPOST('button_search', 'alpha')
    ) {
        $massaction = ''; // Protection to avoid mass action if we force a new search during a mass action confirmation
    }

    // Mass actions
    $objectclass = 'BuyPriceHistory';
    $objectlabel = 'BuyPriceHistory';
    $uploaddir = $conf->buypricehistory->dir_output;
    include DOL_DOCUMENT_ROOT . '/core/actions_massactions.inc.php';
}



/*
 * View
 */

$form = new Form($db);
$now = dol_now();

// Build and execute select
// --------------------------------------------------------------------
$sql = 'SELECT ';
foreach ($arrayfields as $key => $val) {
    $sql .=  $key . ', ';
}
// Add fields from extrafields
if (!empty($extrafields->attributes[$object->table_element]['label'])) {
    foreach ($extrafields->attributes[$object->table_element]['label'] as $key => $val) {
        $sql .= ($extrafields->attributes[$object->table_element]['type'][$key] != 'separate' ? "ef." . $key . ' as options_' . $key . ', ' : '');
    }
}
// Add fields from hooks
$parameters = array();
$reshook = $hookmanager->executeHooks('printFieldListSelect', $parameters, $object); // Note that $action and $object may have been modified by hook
$sql .= preg_replace('/^,/', '', $hookmanager->resPrint);
$sql = preg_replace('/,\s*$/', '', $sql);
$sql .= " FROM " . MAIN_DB_PREFIX . $object->table_element . " as t";
if (is_array($extrafields->attributes[$object->table_element]['label']) && count($extrafields->attributes[$object->table_element]['label'])) {
    $sql .= " LEFT JOIN " . MAIN_DB_PREFIX . $object->table_element . "_extrafields as ef on (t.rowid = ef.fk_object)";
}
// Add table from hooks
$parameters = array();
$reshook = $hookmanager->executeHooks('printFieldListFrom', $parameters, $object); // Note that $action and $object may have been modified by hook
$sql .= $hookmanager->resPrint;
if ($object->ismultientitymanaged == 1) {
    $sql .= " WHERE t.entity IN (" . getEntity($object->element) . ")";
} else {
    $sql .= " WHERE 1 = 1";
}
$sql .= ' AND t.fk_product = ' . $id;
foreach ($search as $key => $val) {
    if ($key == 'status' && $search[$key] == -1) {
        continue;
    }
    $mode_search = (($object->isInt($object->fields[$key]) || $object->isFloat($object->fields[$key])) ? 1 : 0);
    if (strpos($object->fields[$key]['type'], 'integer:') === 0) {
        if ($search[$key] == '-1') {
            $search[$key] = '';
        }
        $mode_search = 2;
    }
    if ($search[$key] != '') {
        $sql .= natural_search($key, $search[$key], (($key == 'status') ? 2 : $mode_search));
    }
}
if ($search_all) {
    $sql .= natural_search(array_keys($fieldstosearchall), $search_all);
}

// Add where from extra fields
include DOL_DOCUMENT_ROOT . '/core/tpl/extrafields_list_search_sql.tpl.php';
// Add where from hooks
$parameters = array();
$reshook = $hookmanager->executeHooks('printFieldListWhere', $parameters, $object); // Note that $action and $object may have been modified by hook
$sql .= $hookmanager->resPrint;
$sql .= $db->order($sortfield, $sortorder);

// Count total nb of records
$nbtotalofrecords = '';
if (empty($conf->global->MAIN_DISABLE_FULL_SCANLIST)) {
    $resql = $db->query($sql);
    $nbtotalofrecords = $db->num_rows($resql);
    if (($page * $limit) > $nbtotalofrecords) { // if total of record found is smaller than page * limit, goto and load page 0
        $page = 0;
        $offset = 0;
    }
}
// if total of record found is smaller than limit, no need to do paging and to restart another select with limits set.
if (is_numeric($nbtotalofrecords) && ($limit > $nbtotalofrecords || empty($limit))) {
    $num = $nbtotalofrecords;
} else {
    if ($limit) {
        $sql .= $db->plimit($limit + 1, $offset);
    }

    $resql = $db->query($sql);
    if (!$resql) {
        dol_print_error($db);
        exit;
    }

    $num = $db->num_rows($resql);
}
// Output page
// --------------------------------------------------------------------


$title = $langs->trans('ProductServiceCard');
$helpurl = '';
$shortlabel = dol_trunc($product->label, 16);
if (GETPOST("type") == '0' || ($object->type == Product::TYPE_PRODUCT)) {
    $title = $langs->trans('Product') . " " . $shortlabel . " - " . $langs->trans('BuyPriceHistoryTitle');
    $helpurl = 'EN:Module_Products|FR:Module_Produits|ES:M&oacute;dulo_Productos';
}
if (GETPOST("type") == '1' || ($object->type == Product::TYPE_SERVICE)) {
    $title = $langs->trans('Service') . " " . $shortlabel . " - " . $langs->trans('BuyPriceHistoryTitle');
    $helpurl = 'EN:Module_Services_En|FR:Module_Services|ES:M&oacute;dulo_Servicios';
}

llxHeader('', $title, $helpurl, '', 0, 0, '', '', '', 'classforhorizontalscrolloftabs');
$head = product_prepare_head($product);
$titre = $langs->trans("CardProduct" . $product->type);
$picto = ($product->type == Product::TYPE_SERVICE ? 'service' : 'product');

print dol_get_fiche_head($head, 'product_buypricehistory', $titre, -1, $picto);

$linkback = '<a href="' . DOL_URL_ROOT . '/product/list.php?restore_lastsearch_values=1">' . $langs->trans("BackToList") . '</a>';
$product->next_prev_filter = " fk_product_type = " . $product->type;

$shownav = 1;
if ($user->socid && !in_array('product', explode(',', $conf->global->MAIN_MODULES_FOR_EXTERNAL))) {
    $shownav = 0;
}

dol_banner_tab($product, 'ref', $linkback, $shownav, 'ref');

print '<div class="fichecenter">';

print '<div class="underbanner clearboth"></div>';
print '<table class="border tableforfield" width="100%">';

// Cost price. Can be used for margin module for option "calculate margin on explicit cost price
print '<tr><td>';
$textdesc = $langs->trans("CostPriceDescription");
$textdesc .= "<br>" . $langs->trans("CostPriceUsage");
$text = $form->textwithpicto($langs->trans("CostPrice"), $textdesc, 1, 'help', '');
print $form->editfieldkey($text, 'cost_price', $product->cost_price, $product, $usercancreate, 'amount:6');
print '</td><td colspan="2">';
print $form->editfieldval($text, 'cost_price', $product->cost_price, $product, $usercancreate, 'amount:6');
print '</td></tr>';

// PMP
print '<tr><td class="titlefield">' . $form->textwithpicto($langs->trans("AverageUnitPricePMPShort"), $langs->trans("AverageUnitPricePMPDesc")) . '</td>';
print '<td>';
if ($product->pmp > 0) {
    print price($product->pmp) . ' ' . $langs->trans("HT");
}
print '</td>';
print '</tr>';

// Best buying Price
print '<tr><td class="titlefield">' . $langs->trans("BuyingPriceMin") . '</td>';
print '<td colspan="2">';
$product_fourn = new ProductFournisseur($db);
if ($product_fourn->find_min_price_product_fournisseur($product->id) > 0) {
    if ($product_fourn->product_fourn_price_id > 0) {
        print $product_fourn->display_price_product_fournisseur();
    } else {
        print $langs->trans("NotDefined");
    }
}
print '</td></tr>';

print '</table>';

print '</div>';
print '<div style="clear:both"></div>';

print dol_get_fiche_end();

$arrayofselected = is_array($toselect) ? $toselect : array();

$param = '';
if (!empty($contextpage) && $contextpage != $_SERVER["PHP_SELF"]) {
    $param .= '&contextpage=' . urlencode($contextpage);
}
if ($limit > 0 && $limit != $conf->liste_limit) {
    $param .= '&limit=' . urlencode($limit);
}
foreach ($search as $key => $val) {
    if (is_array($search[$key]) && count($search[$key])) {
        foreach ($search[$key] as $skey) {
            $param .= '&search_' . $key . '[]=' . urlencode($skey);
        }
    } else {
        $param .= '&search_' . $key . '=' . urlencode($search[$key]);
    }
}
if ($optioncss != '') {
    $param .= '&optioncss=' . urlencode($optioncss);
}
// Add $param from extra fields
include DOL_DOCUMENT_ROOT . '/core/tpl/extrafields_list_search_param.tpl.php';
// Add $param from hooks
$parameters = array();
$reshook = $hookmanager->executeHooks('printFieldListSearchParam', $parameters, $object); // Note that $action and $object may have been modified by hook
$param .= $hookmanager->resPrint;

// List of mass actions available
$arrayofmassactions = array();
if ($permissiontodelete) {
    $arrayofmassactions['predelete'] = '<span class="fa fa-trash paddingrightonly"></span>' . $langs->trans("Delete");
}
if (GETPOST('nomassaction', 'int') || in_array($massaction, array('presend', 'predelete'))) {
    $arrayofmassactions = array();
}
$massactionbutton = $form->selectMassAction('', $arrayofmassactions);

print '<form method="POST" id="searchFormList" action="' . $_SERVER["PHP_SELF"] . '">' . "\n";
if ($optioncss != '') {
    print '<input type="hidden" name="optioncss" value="' . $optioncss . '">';
}
print '<input type="hidden" name="token" value="' . newToken() . '">';
print '<input type="hidden" name="formfilteraction" id="formfilteraction" value="list">';
print '<input type="hidden" name="action" value="list">';
print '<input type="hidden" name="id" value="' . $id . '">';
print '<input type="hidden" name="sortfield" value="' . $sortfield . '">';
print '<input type="hidden" name="sortorder" value="' . $sortorder . '">';
print '<input type="hidden" name="contextpage" value="' . $contextpage . '">';

//$newcardbutton = dolGetButtonTitle($langs->trans('New'), '', 'fa fa-plus-circle', dol_buildpath('/buypricehistory/buypricehistory_card.php', 1).'?action=create&backtopage='.urlencode($_SERVER['PHP_SELF']), '', $permissiontoadd);

print_barre_liste($title, $page, $_SERVER["PHP_SELF"], $param, $sortfield, $sortorder, $massactionbutton, $num, $nbtotalofrecords, 'title_accountancy.png', 0, $newcardbutton, '', $limit, 0, 0, 1);

// Add code for pre mass action (confirmation or email presend form)
$topicmail = "SendBuyPriceHistoryRef";
$modelmail = "buypricehistory";
$objecttmp = new BuyPriceHistory($db);
$trackid = 'xxxx' . $object->id;
include DOL_DOCUMENT_ROOT . '/core/tpl/massactions_pre.tpl.php';

if ($search_all) {
    foreach ($fieldstosearchall as $key => $val) {
        $fieldstosearchall[$key] = $langs->trans($val);
    }
    print '<div class="divsearchfieldfilter">' . $langs->trans("FilterOnInto", $search_all) . join(', ', $fieldstosearchall) . '</div>';
}

$moreforfilter = '';


$parameters = array();
$reshook = $hookmanager->executeHooks('printFieldPreListTitle', $parameters, $object); // Note that $action and $object may have been modified by hook
if (empty($reshook)) {
    $moreforfilter .= $hookmanager->resPrint;
} else {
    $moreforfilter = $hookmanager->resPrint;
}

if (!empty($moreforfilter)) {
    print '<div class="liste_titre liste_titre_bydiv centpercent">';
    print $moreforfilter;
    print '</div>';
}

$varpage = empty($contextpage) ? $_SERVER["PHP_SELF"] : $contextpage;
$selectedfields = $form->multiSelectArrayWithCheckbox('selectedfields', $arrayfields, $varpage); // This also change content of $arrayfields
$selectedfields .= (count($arrayofmassactions) ? $form->showCheckAddButtons('checkforselect', 1) : '');

print '<div class="div-table-responsive">'; // You can use div-table-responsive-no-min if you dont need reserved height for your table
print '<table class="tagtable nobottomiftotal liste' . ($moreforfilter ? " listwithfilterbefore" : "") . '">' . "\n";


// Fields title search
// --------------------------------------------------------------------
print '<tr class="liste_titre">';
foreach ($object->fields as $key => $val) {
    $cssforfield = (empty($val['css']) ? '' : $val['css']);
    if ($key == 'status') {
        $cssforfield .= ($cssforfield ? ' ' : '') . 'center';
    } elseif (in_array($val['type'], array('date', 'datetime', 'timestamp'))) {
        $cssforfield .= ($cssforfield ? ' ' : '') . 'center';
    } elseif (in_array($val['type'], array('timestamp'))) {
        $cssforfield .= ($cssforfield ? ' ' : '') . 'nowrap';
    } elseif (in_array($val['type'], array('double(24,8)', 'double(6,3)', 'integer', 'real', 'price')) && $val['label'] != 'TechnicalID') {
        $cssforfield .= ($cssforfield ? ' ' : '') . 'right';
    }
    if (!empty($arrayfields['t.' . $key]['checked'])) {
        $arrayfields['t.' . $key]['searchform'] = '<td class="liste_titre' . ($cssforfield ? ' ' . $cssforfield : '') . '">';
        if (!empty($val['arrayofkeyval']) && is_array($val['arrayofkeyval'])) {
            $arrayfields['t.' . $key]['searchform'] .= $form->selectarray('search_' . $key, $val['arrayofkeyval'], $search[$key], $val['notnull'], 0, 0, '', 1, 0, 0, '', 'maxwidth100', 1);
        } elseif (strpos($val['type'], 'integer:') === 0) {
            $arrayfields['t.' . $key]['searchform'] .= $object->showInputField($val, $key, $search[$key], '', '', 'search_', 'maxwidth125', 1);
        } elseif (!preg_match('/^(date|timestamp)/', $val['type'])) {
            $arrayfields['t.' . $key]['searchform'] .= '<input type="text" class="flat maxwidth75" name="search_' . $key . '" value="' . dol_escape_htmltag($search[$key]) . '">';
        }
        $arrayfields['t.' . $key]['searchform'] .= '</td>';
    }
}
foreach ($arrayfields as $key => $value) {
    if (!empty($arrayfields[$key]['checked']) && !empty($arrayfields[$key]['searchform'])) {
        print $arrayfields[$key]['searchform'];
    }
}
// Extra fields
include DOL_DOCUMENT_ROOT . '/core/tpl/extrafields_list_search_input.tpl.php';

// Fields from hook
$parameters = array('arrayfields' => $arrayfields);
$reshook = $hookmanager->executeHooks('printFieldListOption', $parameters, $object); // Note that $action and $object may have been modified by hook
print $hookmanager->resPrint;
// Action column
print '<td class="liste_titre maxwidthsearch">';
$searchpicto = $form->showFilterButtons();
print $searchpicto;
print '</td>';
print '</tr>' . "\n";


// Fields title label
// --------------------------------------------------------------------
print '<tr class="liste_titre">';
foreach ($object->fields as $key => $val) {
    $cssforfield = (empty($val['csslist']) ? (empty($val['css']) ? '' : $val['css']) : $val['csslist']);
    if ($key == 'status') {
        $cssforfield .= ($cssforfield ? ' ' : '') . 'center';
    } elseif (in_array($val['type'], array('date', 'datetime', 'timestamp'))) {
        $cssforfield .= ($cssforfield ? ' ' : '') . 'center';
    } elseif (in_array($val['type'], array('timestamp'))) {
        $cssforfield .= ($cssforfield ? ' ' : '') . 'nowrap';
    } elseif (in_array($val['type'], array('double(24,8)', 'double(6,3)', 'integer', 'real', 'price')) && $val['label'] != 'TechnicalID') {
        $cssforfield .= ($cssforfield ? ' ' : '') . 'right';
    }
    if (!empty($arrayfields['t.' . $key]['checked'])) {
        $arrayfields['t.' . $key]['css'] = $cssforfield;
    }
}
foreach ($arrayfields as $key => $value) {
    if (!empty($arrayfields[$key]['checked'])) {
        $cssforfield = $arrayfields[$key]['css'];
        print getTitleFieldOfList($arrayfields[$key]['label'], 0, $_SERVER['PHP_SELF'], $key, '', 'id=' . $id, ($cssforfield ? 'class="' . $cssforfield . '"' : ''), $sortfield, $sortorder, ($cssforfield ? $cssforfield . ' ' : '')) . "\n";
    }
}
// Extra fields
include DOL_DOCUMENT_ROOT . '/core/tpl/extrafields_list_search_title.tpl.php';
// Hook fields
$parameters = array('arrayfields' => $arrayfields, 'param' => $param, 'sortfield' => $sortfield, 'sortorder' => $sortorder);
$reshook = $hookmanager->executeHooks('printFieldListTitle', $parameters, $object); // Note that $action and $object may have been modified by hook
print $hookmanager->resPrint;
// Action column
print getTitleFieldOfList($selectedfields, 0, $_SERVER["PHP_SELF"], '', '', '', '', $sortfield, $sortorder, 'center maxwidthsearch ') . "\n";
print '</tr>' . "\n";


// Detect if we need a fetch on each output line
$needToFetchEachLine = 0;
if (is_array($extrafields->attributes[$object->table_element]['computed']) && count($extrafields->attributes[$object->table_element]['computed']) > 0) {
    foreach ($extrafields->attributes[$object->table_element]['computed'] as $key => $val) {
        if (preg_match('/\$object/', $val)) {
            $needToFetchEachLine++; // There is at least one compute field that use $object
        }
    }
}


// Loop on record
// --------------------------------------------------------------------
$i = 0;
$totalarray = array();
while ($i < ($limit ? min($num, $limit) : $num)) {
    $obj = $db->fetch_object($resql);
    if (empty($obj)) {
        break; // Should not happen
    }

    // Store properties in $object
    $object->setVarsFromFetchObj($obj);

    // Show here line of result
    print '<tr class="oddeven">';
    // Date from
    if (!empty($arrayfields['t.begin_date']['checked'])) {
        print '<td>' . ($object->begin_date ? dol_print_date($object->begin_date, 'dayhour') : '') . '</td>';
    }

    // Date to
    if (!empty($arrayfields['t.end_date']['checked'])) {
        print '<td>' . ($object->end_date ? dol_print_date($object->end_date, 'dayhour') : '') . '</td>';
    }

    // Supplier
    if (!empty($arrayfields['t.fk_soc']['checked'])) {
        $object->fourn_id = $object->fk_soc;
        print '<td class="tdoverflowmax200">' . $object->showOutputField($object->fields['fk_soc'], 'fk_soc', $object->fk_soc) . '</td>';
    }

    // Supplier ref
    if (!empty($arrayfields['t.ref_fourn']['checked'])) {
        print '<td class="left">' . $object->ref_fourn . '</td>';
    }

    // Availability
    if (!empty($arrayfields['t.fk_availability']['checked'])) {
        $form->load_cache_availability();
        $availability = $form->cache_availability[$object->fk_availability]['label'];
        print '<td class="left">' . $availability . '</td>';
    }

    // Quantity
    if (!empty($arrayfields['t.quantity']['checked'])) {
        print '<td class="right">';
        print $object->quantity;
        // Units
        if (!empty($conf->global->PRODUCT_USE_UNITS)) {
            $unit = $product->getLabelOfUnit();
            if ($unit !== '') {
                print '&nbsp;&nbsp;' . $langs->trans($unit);
            }
        }
        print '</td>';
    }

    // VAT rate
    if (!empty($arrayfields['t.tva_tx']['checked'])) {
        print '<td class="right">';
        print vatrate($object->tva_tx, true);
        print '</td>';
    }

    // Price for the quantity
    if (!empty($arrayfields['t.price']['checked'])) {
        print '<td class="right">';
        print $object->price ? price($object->price) : "";
        print '</td>';
    }

    if (!empty($conf->multicurrency->enabled) && !empty($arrayfields['t.multicurrency_price']['checked'])) {
        // Price for the quantity in currency
        print '<td class="right">';
        print $object->fourn_multicurrency_price ? price($object->fourn_multicurrency_price) : "";
        print '</td>';
    }

    // Unit price
    if (!empty($arrayfields['t.unitprice']['checked'])) {
        print '<td class="right">';
        print price($object->unitprice);
        print '</td>';
    }

    // Unit price in currency
    if (!empty($conf->multicurrency->enabled) && !empty($arrayfields['t.multicurrency_unitprice']['checked'])) {
        print '<td class="right">';
        print price($object->multicurrency_unitprice);
        print '</td>';
    }

    // Currency
    if (!empty($conf->multicurrency->enabled) && !empty($arrayfields['t.multicurrency_code']['checked'])) {
        print '<td class="right">';
        print $object->multicurrency_code ? currency_name($object->multicurrency_code) : '';
        print '</td>';
    }

    // Discount
    if (!empty($arrayfields['t.remise_percent']['checked'])) {
        print '<td class="right">';
        print price2num($object->remise_percent) . '%';
        print '</td>';
    }

    // Delivery delay
    if (!empty($arrayfields['t.delivery_time_days']['checked'])) {
        print '<td class="right">';
        print $object->delivery_time_days;
        print '</td>';
    }

    // Reputation
    if (!empty($arrayfields['t.supplier_reputation']['checked'])) {
        print '<td class="center">';
        if (!empty($object->supplier_reputation) && !empty($product->reputations[$object->supplier_reputation])) {
            print $product->reputations[$object->supplier_reputation];
        }
        print '</td>';
    }

    // Barcode
    if (!empty($arrayfields['t.barcode']['checked'])) {
        print '<td align="right">';
        print $object->barcode;
        print '</td>';
    }

    // Barcode type
    if (!empty($arrayfields['t.fk_barcode_type']['checked'])) {
        print '<td class="center">';
        $object->barcode_type = !empty($object->fk_barcode_type) ? $object->fk_barcode_type : 0;
        $object->fetch_barcode();
        print $object->barcode_type_label ? $object->barcode_type_label : ($object->barcode ? '<div class="warning">' . $langs->trans("SetDefaultBarcodeType") . '<div>' : '');
        print '</td>';
    }

    // Packaging
    if (!empty($arrayfields['t.packaging']['checked'])) {
        print '<td align="center">';
        print price2num($object->packaging);
        print '</td>';
    }

    // User
    if (!empty($arrayfields['t.original_fk_user']['checked'])) {
        print '<td align="center">';
        print $object->showOutputField($object->fields['original_fk_user'], 'original_fk_user', $object->original_fk_user);
        print '</td>';
    }
    // Extra fields
    include DOL_DOCUMENT_ROOT . '/core/tpl/extrafields_list_print_fields.tpl.php';
    // Fields from hook
    $parameters = array('arrayfields' => $arrayfields, 'object' => $object, 'obj' => $obj, 'i' => $i, 'totalarray' => &$totalarray);
    $reshook = $hookmanager->executeHooks('printFieldListValue', $parameters, $object); // Note that $action and $object may have been modified by hook
    print $hookmanager->resPrint;
    // Action column
    print '<td class="nowrap center">';
    if ($massactionbutton || $massaction) {   // If we are in select mode (massactionbutton defined) or if we have already selected and sent an action ($massaction) defined
        $selected = 0;
        if (in_array($object->id, $arrayofselected)) {
            $selected = 1;
        }
        print '<input id="cb' . $object->id . '" class="flat checkforselect" type="checkbox" name="toselect[]" value="' . $object->id . '"' . ($selected ? ' checked="checked"' : '') . '>';
    }
    print '</td>';
    if (!$i) {
        $totalarray['nbfield']++;
    }

    print '</tr>' . "\n";

    $i++;
}

// Show total line
include DOL_DOCUMENT_ROOT . '/core/tpl/list_print_total.tpl.php';

// If no record found
if ($num == 0) {
    $colspan = 1;
    foreach ($arrayfields as $key => $val) {
        if (!empty($val['checked'])) {
            $colspan++;
        }
    }
    print '<tr><td colspan="' . $colspan . '" class="opacitymedium">' . $langs->trans("NoRecordFound") . '</td></tr>';
}


$db->free($resql);

$parameters = array('arrayfields' => $arrayfields, 'sql' => $sql);
$reshook = $hookmanager->executeHooks('printFieldListFooter', $parameters, $object); // Note that $action and $object may have been modified by hook
print $hookmanager->resPrint;

print '</table>' . "\n";
print '</div>' . "\n";

print '</form>' . "\n";

if (in_array('builddoc', $arrayofmassactions) && ($nbtotalofrecords === '' || $nbtotalofrecords)) {
    $hidegeneratedfilelistifempty = 1;
    if ($massaction == 'builddoc' || $action == 'remove_file' || $show_files) {
        $hidegeneratedfilelistifempty = 0;
    }

    require_once DOL_DOCUMENT_ROOT . '/core/class/html.formfile.class.php';
    $formfile = new FormFile($db);

    // Show list of available documents
    $urlsource = $_SERVER['PHP_SELF'] . '?sortfield=' . $sortfield . '&sortorder=' . $sortorder;
    $urlsource .= str_replace('&amp;', '&', $param);

    $filedir = $diroutputmassaction;
    $genallowed = $permissiontoread;
    $delallowed = $permissiontoadd;

    print $formfile->showdocuments('massfilesarea_buypricehistory', '', $filedir, $urlsource, 0, $delallowed, '', 1, 1, 0, 48, 1, $param, $title, '', '', '', null, $hidegeneratedfilelistifempty);
}

// End of page
llxFooter();
$db->close();
