diff a/htdocs/custom/advancedictionaries/class/dictionary.class.php b/htdocs/custom/advancedictionaries/class/dictionary.class.php	(rejected hunks)
@@ -3818,7 +3830,7 @@ class DictionaryLine extends CommonObjectLine
                         if ($value === NULL) {
                             $value_arr = array('NULL');
                         } else {
-                            $value_arr = array_filter(explode(',', (string)$value), 'strlen');
+                            $value_arr = array_filter(explode(',', (string) $value), 'strlen');
                         }
                     }
                     $InfoFieldList = getInfoFieldArrayFromOptionsForChkbxlstFieldType($field, $this->dictionary->table_name);
@@ -3831,90 +3843,90 @@ class DictionaryLine extends CommonObjectLine
                             $keyList = $InfoFieldList[2] . ' as rowid';
                         }
 
-                    $fields_label = !empty($InfoFieldList[1]) ? explode('|', $InfoFieldList[1]) : null;
-                    $fieldList = array();
-                    if (is_array($fields_label)) {
-                        $keyList .= ', ' . implode(', ', $fields_label);
-                        foreach ($fields_label as $l) {
-                            if (preg_match('/\s+AS\s+(\S+)\s*$/i', $l, $matches)) {
-                                $fieldList[] = $matches[1];
-                            } else {
-                                $fieldList[] = $l;
+                        $fields_label = !empty($InfoFieldList[1]) ? explode('|', $InfoFieldList[1]) : null;
+                        $fieldList = array();
+                        if (is_array($fields_label)) {
+                            $keyList .= ', ' . implode(', ', $fields_label);
+                            foreach ($fields_label as $l) {
+                                if (preg_match('/\s+AS\s+(\S+)\s*$/i', $l, $matches)) {
+                                    $fieldList[] = $matches[1];
+                                } else {
+                                    $fieldList[] = $l;
+                                }
                             }
                         }
-                    }
 
-                    $fields_lang = !empty($InfoFieldList[7]) ? explode('|', $InfoFieldList[7]) : null;
-                    $fieldLangList = array();
-                    if (is_array($fields_lang)) {
-                        $keyList .= ', ' . implode(', ', $fields_lang);
-                        foreach ($fields_lang as $l) {
-                            if (preg_match('/\s+AS\s+(\S+)\s*$/i', $l, $matches)) {
-                                $fieldLangList[] = $matches[1];
-                            } else {
-                                $fieldLangList[] = $l;
+                        $fields_lang = !empty($InfoFieldList[7]) ? explode('|', $InfoFieldList[7]) : null;
+                        $fieldLangList = array();
+                        if (is_array($fields_lang)) {
+                            $keyList .= ', ' . implode(', ', $fields_lang);
+                            foreach ($fields_lang as $l) {
+                                if (preg_match('/\s+AS\s+(\S+)\s*$/i', $l, $matches)) {
+                                    $fieldLangList[] = $matches[1];
+                                } else {
+                                    $fieldLangList[] = $l;
+                                }
                             }
                         }
-                    }
 
-                    $sql = 'SELECT ' . $keyList;
-                    $sql .= ' FROM ' . MAIN_DB_PREFIX . str_replace('{{DB_PREFIX}}', MAIN_DB_PREFIX, $InfoFieldList[0]);
-                    if (strpos($InfoFieldList[4], 'extra') !== false) {
-                        $sql .= ' as main';
-                    }
-                    $sql .= " WHERE " . $selectkey . " IN (" . implode(',', $value_arr) . ")";
+                        $sql = 'SELECT ' . $keyList;
+                        $sql .= ' FROM ' . MAIN_DB_PREFIX . str_replace('{{DB_PREFIX}}', MAIN_DB_PREFIX, $InfoFieldList[0]);
+                        if (strpos($InfoFieldList[4], 'extra') !== false) {
+                            $sql .= ' as main';
+                        }
+                        $sql .= " WHERE " . $selectkey . " IN (" . implode(',', $value_arr) . ")";
 
-                    $value = ''; // value was used, so now we reste it to use it to build final output
-                    dol_syslog(__METHOD__ . ' type=chkbxlst', LOG_DEBUG);
-                    $resql = $this->db->query($sql);
-                    if ($resql) {
-                        $toprint = array();
-                        while ($obj = $this->db->fetch_object($resql)) {
-                            if (is_array($value_arr) && in_array($obj->rowid, $value_arr)) {
-                                if (!empty($fieldLangList)) {
-                                    foreach ($fieldLangList as $lang) {
-                                        if (!empty($obj->$lang)) $langs->load($obj->$lang);
-                                    }
-                                }
-                                if (is_array($fieldList) && count($fieldList) > 1) {
-                                    // Several field into label (eq table:code|libelle:rowid)
-                                    $label_separator = isset($field['label_separator']) ? $field['label_separator'] : ' ';
-                                    $labelstoshow = array();
-                                    foreach ($fieldList as $field_toshow) {
-                                        $translabel = $langs->trans($field['translate_prefix'] . $obj->$field_toshow . $field['translate_prefix']);
-                                        if ($translabel != $obj->$field_toshow) {
-                                            $labelstoshow[] = dol_trunc($translabel, isset($field['truncate']) && $field['truncate'] > 0 ? $field['truncate'] : 0);
-                                        } else {
-                                            $labelstoshow[] = dol_trunc($obj->$field_toshow, isset($field['truncate']) && $field['truncate'] > 0 ? $field['truncate'] : 0);
+                        $value = ''; // value was used, so now we reste it to use it to build final output
+                        dol_syslog(__METHOD__ . ' type=chkbxlst', LOG_DEBUG);
+                        $resql = $this->db->query($sql);
+                        if ($resql) {
+                            $toprint = array();
+                            while ($obj = $this->db->fetch_object($resql)) {
+                                if (is_array($value_arr) && in_array($obj->rowid, $value_arr)) {
+                                    if (!empty($fieldLangList)) {
+                                        foreach ($fieldLangList as $lang) {
+                                            if (!empty($obj->$lang)) $langs->load($obj->$lang);
                                         }
                                     }
-                                    $labelstoshow = array_filter($labelstoshow);
-                                    $toprint[] = '<li class="select2-search-choice-dolibarr noborderoncategories" style="background: #aaa">' . implode($label_separator, $labelstoshow) . '</li>';
-                                } else {
-                                    $translabel = '';
-                                    if (!empty($obj->{$fieldList[0]})) {
-                                        $translabel = $langs->trans($field['translate_prefix'] . $obj->{$fieldList[0]} . $field['translate_suffix']);
-                                    }
-                                    if ($translabel != $obj->{$fieldList[0]}) {
-                                        $toprint[] = '<li class="select2-search-choice-dolibarr noborderoncategories" style="background: #aaa">' . dol_trunc($translabel, isset($field['truncate']) && $field['truncate'] > 0 ? $field['truncate'] : 0) . '</li>';
+                                    if (is_array($fieldList) && count($fieldList) > 1) {
+                                        // Several field into label (eq table:code|libelle:rowid)
+                                        $label_separator = isset($field['label_separator']) ? $field['label_separator'] : ' ';
+                                        $labelstoshow = array();
+                                        foreach ($fieldList as $field_toshow) {
+                                            $translabel = $langs->trans($field['translate_prefix'] . $obj->$field_toshow . $field['translate_prefix']);
+                                            if ($translabel != $obj->$field_toshow) {
+                                                $labelstoshow[] = dol_trunc($translabel, isset($field['truncate']) && $field['truncate'] > 0 ? $field['truncate'] : 0);
+                                            } else {
+                                                $labelstoshow[] = dol_trunc($obj->$field_toshow, isset($field['truncate']) && $field['truncate'] > 0 ? $field['truncate'] : 0);
+                                            }
+                                        }
+                                        $labelstoshow = array_filter($labelstoshow);
+                                        $toprint[] = '<li class="select2-search-choice-dolibarr noborderoncategories" style="background: #aaa">' . implode($label_separator, $labelstoshow) . '</li>';
                                     } else {
-                                        $toprint[] = '<li class="select2-search-choice-dolibarr noborderoncategories" style="background: #aaa">' . $obj->{$fieldList[0]} . '</li>';
+                                        $translabel = '';
+                                        if (!empty($obj->{$fieldList[0]})) {
+                                            $translabel = $langs->trans($field['translate_prefix'] . $obj->{$fieldList[0]} . $field['translate_suffix']);
+                                        }
+                                        if ($translabel != $obj->{$fieldList[0]}) {
+                                            $toprint[] = '<li class="select2-search-choice-dolibarr noborderoncategories" style="background: #aaa">' . dol_trunc($translabel, isset($field['truncate']) && $field['truncate'] > 0 ? $field['truncate'] : 0) . '</li>';
+                                        } else {
+                                            $toprint[] = '<li class="select2-search-choice-dolibarr noborderoncategories" style="background: #aaa">' . $obj->{$fieldList[0]} . '</li>';
+                                        }
                                     }
                                 }
                             }
+                            $value = '<div class="select2-container-multi-dolibarr" style="width: 90%;"><ul class="select2-choices-dolibarr">' . implode(' ', $toprint) . '</ul></div>';
+                        } else {
+                            dol_syslog(__METHOD__ . ' Error ' . $this->db->lasterror(), LOG_WARNING);
                         }
-                        $value = '<div class="select2-container-multi-dolibarr" style="width: 90%;"><ul class="select2-choices-dolibarr">' . implode(' ', $toprint) . '</ul></div>';
                     } else {
-                        dol_syslog(__METHOD__ . ' Error ' . $this->db->lasterror(), LOG_WARNING);
-                    }
-                } else {
-                    $toprint = array();
-                    foreach ($value_arr as $val) {
-                        if ($val === 'NULL') continue;
-                        $toprint[] = $this->getObjectNomUrl($fieldName, $InfoFieldList[5], $InfoFieldList[6], $val);
+                        $toprint = array();
+                        foreach ($value_arr as $val) {
+                            if ($val === 'NULL') continue;
+                            $toprint[] = $this->getObjectNomUrl($fieldName, $InfoFieldList[5], $InfoFieldList[6], $val);
+                        }
+                        $value = implode(', ', $toprint);
                     }
-                    $value = implode(', ', $toprint);
-                }
                     break;
                 case 'int':
                     break;
