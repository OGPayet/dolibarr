diff a/htdocs/custom/advancedictionaries/class/dictionary.class.php b/htdocs/custom/advancedictionaries/class/dictionary.class.php	(rejected hunks)
@@ -3609,76 +3820,103 @@ class DictionaryLine extends CommonObjectLine
                             $value_arr = array_filter(explode(',', (string)$value), 'strlen');
                         }
                     }
-                    $InfoFieldList = getInfoFieldArrayFromOptionsForChkbxlstFieldType($field,$this->dictionary->table_name);
+                    $InfoFieldList = getInfoFieldArrayFromOptionsForChkbxlstFieldType($field, $this->dictionary->table_name);
+                    if (empty($InfoFieldList[5]) && empty($InfoFieldList[6])) {
+                        $selectkey = "rowid";
+                        $keyList = 'rowid';
 
-                    $selectkey = "rowid";
-                    $keyList = 'rowid';
+                        if (count($InfoFieldList) >= 3) {
+                            $selectkey = $InfoFieldList[2];
+                            $keyList = $InfoFieldList[2] . ' as rowid';
+                        }
 
-                    if (count($InfoFieldList) >= 3) {
-                        $selectkey = $InfoFieldList[2];
-                        $keyList = $InfoFieldList[2] . ' as rowid';
+                    $fields_label = !empty($InfoFieldList[1]) ? explode('|', $InfoFieldList[1]) : null;
+                    $fieldList = array();
+                    if (is_array($fields_label)) {
+                        $keyList .= ', ' . implode(', ', $fields_label);
+                        foreach ($fields_label as $l) {
+                            if (preg_match('/\s+AS\s+(\S+)\s*$/i', $l, $matches)) {
+                                $fieldList[] = $matches[1];
+                            } else {
+                                $fieldList[] = $l;
+                            }
+                        }
                     }
 
-                    $fields_label = explode('|', $InfoFieldList[1]);
-                    if (is_array($fields_label)) {
-                        $keyList .= ', ';
-                        $keyList .= implode(', ', $fields_label);
+                    $fields_lang = !empty($InfoFieldList[7]) ? explode('|', $InfoFieldList[7]) : null;
+                    $fieldLangList = array();
+                    if (is_array($fields_lang)) {
+                        $keyList .= ', ' . implode(', ', $fields_lang);
+                        foreach ($fields_lang as $l) {
+                            if (preg_match('/\s+AS\s+(\S+)\s*$/i', $l, $matches)) {
+                                $fieldLangList[] = $matches[1];
+                            } else {
+                                $fieldLangList[] = $l;
+                            }
+                        }
                     }
 
                     $sql = 'SELECT ' . $keyList;
-                    $sql .= ' FROM ' . MAIN_DB_PREFIX . $InfoFieldList[0];
+                    $sql .= ' FROM ' . MAIN_DB_PREFIX . str_replace('{{DB_PREFIX}}', MAIN_DB_PREFIX, $InfoFieldList[0]);
                     if (strpos($InfoFieldList[4], 'extra') !== false) {
                         $sql .= ' as main';
                     }
                     $sql .= " WHERE " . $selectkey . " IN (" . implode(',', $value_arr) . ")";
 
-                    dol_syslog(__METHOD__ . ':showOutputField:$type=chkbxlst', LOG_DEBUG);
+                    $value = ''; // value was used, so now we reste it to use it to build final output
+                    dol_syslog(__METHOD__ . ' type=chkbxlst', LOG_DEBUG);
                     $resql = $this->db->query($sql);
                     if ($resql) {
-                        $value = ''; // value was used, so now we reste it to use it to build final output
                         $toprint = array();
                         while ($obj = $this->db->fetch_object($resql)) {
-
-                            // Several field into label (eq table:code|libelle:rowid)
-                            $fields_label = explode('|', $InfoFieldList[1]);
                             if (is_array($value_arr) && in_array($obj->rowid, $value_arr)) {
-                                if (is_array($fields_label) && count($fields_label) > 1) {
+                                if (!empty($fieldLangList)) {
+                                    foreach ($fieldLangList as $lang) {
+                                        if (!empty($obj->$lang)) $langs->load($obj->$lang);
+                                    }
+                                }
+                                if (is_array($fieldList) && count($fieldList) > 1) {
+                                    // Several field into label (eq table:code|libelle:rowid)
                                     $label_separator = isset($field['label_separator']) ? $field['label_separator'] : ' ';
                                     $labelstoshow = array();
-                                    foreach ($fields_label as $field_toshow) {
-                                        if(isset($obj->$field_toshow))
-                                        {
-                                            $translabel = $langs->trans($obj->$field_toshow);
-                                            if ($translabel != $obj->$field_toshow) {
-                                                $labelstoshow[] = dol_trunc($translabel, 18);
-                                            } else {
-                                                $labelstoshow[] = dol_trunc($obj->$field_toshow, 18);
-                                            }
+                                    foreach ($fieldList as $field_toshow) {
+                                        $translabel = $langs->trans($field['translate_prefix'] . $obj->$field_toshow . $field['translate_prefix']);
+                                        if ($translabel != $obj->$field_toshow) {
+                                            $labelstoshow[] = dol_trunc($translabel, isset($field['truncate']) && $field['truncate'] > 0 ? $field['truncate'] : 0);
+                                        } else {
+                                            $labelstoshow[] = dol_trunc($obj->$field_toshow, isset($field['truncate']) && $field['truncate'] > 0 ? $field['truncate'] : 0);
                                         }
-									}
-									$labelstoshow = array_filter($labelstoshow,function($k){return isset($k);});
+                                    }
                                     $toprint[] = '<li class="select2-search-choice-dolibarr noborderoncategories" style="background: #aaa">' . implode($label_separator, $labelstoshow) . '</li>';
                                 } else {
                                     $translabel = '';
-                                    if (!empty($obj->{$InfoFieldList[1]})) {
-                                        $translabel = $langs->trans($obj->{$InfoFieldList[1]});
+                                    if (!empty($obj->{$fieldList[0]})) {
+                                        $translabel = $langs->trans($field['translate_prefix'] . $obj->{$fieldList[0]} . $field['translate_suffix']);
                                     }
-                                    if ($translabel != $obj->{$InfoFieldList[1]}) {
-                                        $toprint[] = '<li class="select2-search-choice-dolibarr noborderoncategories" style="background: #aaa">' . dol_trunc($translabel, 18) . '</li>';
+                                    if ($translabel != $obj->{$fieldList[0]}) {
+                                        $toprint[] = '<li class="select2-search-choice-dolibarr noborderoncategories" style="background: #aaa">' . dol_trunc($translabel, isset($field['truncate']) && $field['truncate'] > 0 ? $field['truncate'] : 0) . '</li>';
                                     } else {
-                                        $toprint[] = '<li class="select2-search-choice-dolibarr noborderoncategories" style="background: #aaa">' . $obj->{$InfoFieldList[1]} . '</li>';
+                                        $toprint[] = '<li class="select2-search-choice-dolibarr noborderoncategories" style="background: #aaa">' . $obj->{$fieldList[0]} . '</li>';
                                     }
                                 }
                             }
                         }
                         $value = '<div class="select2-container-multi-dolibarr" style="width: 90%;"><ul class="select2-choices-dolibarr">' . implode(' ', $toprint) . '</ul></div>';
-
                     } else {
-                        dol_syslog(__METHOD__ . '::showOutputField error ' . $this->db->lasterror(), LOG_WARNING);
+                        dol_syslog(__METHOD__ . ' Error ' . $this->db->lasterror(), LOG_WARNING);
                     }
+                } else {
+                    $toprint = array();
+                    foreach ($value_arr as $val) {
+                        if ($val === 'NULL') continue;
+                        $toprint[] = $this->getObjectNomUrl($fieldName, $InfoFieldList[5], $InfoFieldList[6], $val);
+                    }
+                    $value = implode(', ', $toprint);
+                }
                     break;
                 case 'int':
                     break;
+                case 'float':
                 case 'double':
                     if (!empty($value)) $value = price($value);
                     break;
