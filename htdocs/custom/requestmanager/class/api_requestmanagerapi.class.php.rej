diff a/htdocs/custom/requestmanager/class/api_requestmanagerapi.class.php b/htdocs/custom/requestmanager/class/api_requestmanagerapi.class.php	(rejected hunks)
@@ -728,193 +728,234 @@ class RequestManagerApi extends DolibarrApi {
     }
 
     /**
-     *  Add an event following a phone call begin
+     *  Create a calling event
      *
-     * @param string   $from_num     Caller's number
-     * @param string   $target_num   Called number
-     * @param string   $type         Sens de l'appel : entrant, sortant, transfert interne
-     * @param integer  $id_IPBX      Id interne à l'IPBX de l'appel
-     * @param string   $hour         Heure de début de l'appel (renseigné par l'IPBX, si non renseigné fait par dolibarr)
-     * @param float    $poste        Poste ayant décroché/émis l'appel
-     * @param string   $name_post    Nom du compte associé au poste
-     * @param string   $groupe       Groupe de réponse à l'origine de l'appel
-     * @param string   $source       Appel source : id interne IPBX
+     * @url	POST /call/{id}/begin
      *
-     * @url	GET /call/begin
+     * @param   int         $id                 Id interne à l'IPBX de l'appel
+     * @param   string      $caller_number      Caller's number
+     * @param   string      $called_number      Called number
+     * @param   string      $type               Sens de l'appel : entrant, sortant, transfert interne
+     * @param   string      $hour               Heure de début de l'appel (renseigné par l'IPBX, si non renseigné fait par dolibarr)
+     * @param   float       $poste              Poste ayant décroché/émis l'appel
+     * @param   string      $name_post          Nom du compte associé au poste
+     * @param   string      $groupe             Groupe de réponse à l'origine de l'appel
+     * @param   string      $source             Appel source : id interne IPBX
      *
-     * @return  object
+     * @return  int                             ID of the calling event
+     *
+     * @throws  401         RestException       Insufficient rights
+     * @throws  404         RestException       Company not found with phones
+     * @throws  404         RestException       Internal user not found with phones
+     * @throws  500         RestException       Error when retrieve company / contact
+     * @throws  500         RestException       Error when retrieve company information
+     * @throws  500         RestException       Error when retrieve internal user
+     * @throws  500         RestException       Error while creating the calling event
      */
-    function CallBegin($from_num, $target_num, $type, $id_IPBX, $hour='', $poste=NULL, $name_post='', $groupe='', $source=NULL)
+    function CallBegin($id, $caller_number, $called_number, $type, $hour='', $poste=NULL, $name_post='', $groupe='', $source=NULL)
     {
         global $langs;
 
-        $now = dol_now();
-
-        $langs->load('requestmanager@requestmanager');
-
-        $from_num = trim($from_num);
-        $from_num = preg_replace("/\s/", "", $from_num);
-        $from_num = preg_replace("/\./", "", $from_num);
-
-        $target_num = trim($target_num);
-        $target_num = preg_replace("/\s/", "", $target_num);
-        $target_num = preg_replace("/\./", "", $target_num);
+        if (!DolibarrApiAccess::$user->rights->agenda->myactions->create) {
+            throw new RestException(401, "Insufficient rights");
+        }
 
-        $target_num_space = substr($target_num, 0, 2) . ' ' . substr($target_num, 2, 2) . ' ' . substr($target_num, 4, 2) . ' ' . substr($target_num, 6, 2) . ' ' . substr($target_num, 8, 2);
-        $from_num_space = substr($from_num, 0, 2) . ' ' . substr($from_num, 2, 2) . ' ' . substr($from_num, 4, 2) . ' ' . substr($from_num, 6, 2) . ' ' . substr($from_num, 8, 2);
+        $now = dol_now();
 
-        require_once DOL_DOCUMENT_ROOT . '/comm/action/class/actioncomm.class.php';
-        $actioncomm = new ActionComm(self::$db);
-        
-        //Search target in contact
-        $sql = "SELECT rowid";
-        $sql .= " FROM " . MAIN_DB_PREFIX . "socpeople";
-        $sql .= " WHERE phone = '" . $target_num_space . "' OR phone_perso = '" . $target_num_space . "' OR phone_mobile = '" . $target_num_space . "'";
-        $sql .= " OR phone = '" . $target_num . "' OR phone_perso = '" . $target_num . "' OR phone_mobile = '" . $target_num . "'";
-        $sql .= " OR phone = '" . $from_num_space . "' OR phone_perso = '" . $from_num_space . "' OR phone_mobile = '" . $from_num_space . "'";
-        $sql .= " OR phone = '" . $from_num . "' OR phone_perso = '" . $from_num . "' OR phone_mobile = '" . $from_num . "'";
+        // Clean parameters
+        $from_num = preg_replace("/\D/", "", $caller_number);
+        $target_num = preg_replace("/\D/", "", $called_number);
+
+        // Search contact / company
+        //---------------------------------------
+        $socid = 0;
+        $contactid = 0;
+
+        $sql = "SELECT socid, contactid";
+        $sql .= " FROM " . MAIN_DB_PREFIX . "requestmanager_soc_contact_phone_book";
+        $sql .= " WHERE entity IN (".getEntity('societe').")";
+        $sql .= " AND (";
+        $sql .= " soc_phone = '" . $from_num . "'";
+        $sql .= " OR contact_phone = '" . $from_num . "'";
+        $sql .= " OR contact_phone_perso = '" . $from_num . "'";
+        $sql .= " OR contact_phone_mobile = '" . $from_num . "'";
+        $sql .= " OR soc_phone = '" . $target_num . "'";
+        $sql .= " OR contact_phone = '" . $target_num . "'";
+        $sql .= " OR contact_phone_perso = '" . $target_num . "'";
+        $sql .= " OR contact_phone_mobile = '" . $target_num . "'";
+        $sql .= " )";
 
         $resql = self::$db->query($sql);
         if ($resql) {
             if ($obj = self::$db->fetch_object($resql)) {
-                require_once DOL_DOCUMENT_ROOT . '/contact/class/contact.class.php';
-                $contact = new Contact(self::$db);
-                $contact->fetch($obj->rowid);
-
-                $actioncomm->contact = $contact;
-                $actioncomm->socid = $contact->socid;
-                $actioncomm->fetch_thirdparty();
-
-                $actioncomm->societe = $actioncomm->thirdparty;
+                $socid = $obj->socid;
+                $contactid = $obj->contactid;
             }
 
             self::$db->free($resql);
+        } else {
+            throw new RestException(500, "Error when retrieve company / contact", self::$db->lasterror());
         }
 
-        if (empty($actioncomm->socid)) {
-            //Search target in thirdparty
-            $sql = "SELECT rowid";
-            $sql .= " FROM " . MAIN_DB_PREFIX . "societe";
-            $sql .= " WHERE phone = '" . $target_num_space . "' OR phone = '" . $target_num . "'";
-            $sql .= " OR phone = '" . $from_num_space . "' OR phone = '" . $from_num . "'";
-
-            $resql = self::$db->query($sql);
-            if ($resql) {
-                if ($obj = self::$db->fetch_object($resql)) {
-                    require_once DOL_DOCUMENT_ROOT . '/societe/class/societe.class.php';
-                    $company = new Societe(self::$db);
-                    $company->fetch($obj->rowid);
-
-                    $actioncomm->socid = $company->id;
-                    $actioncomm->fetch_thirdparty();
-
-                    $actioncomm->societe = $actioncomm->thirdparty;
-                }
-            }
+        if ($socid == 0) {
+            throw new RestException(404, "Company not found with phones: ".$from_num.", ".$target_num);
+        }
 
-            self::$db->free($resql);
+        require_once DOL_DOCUMENT_ROOT . '/societe/class/societe.class.php';
+        $societe = new Societe(self::$db);
+        $result = $societe->fetch($socid);
+        if ($result < 0) {
+            throw new RestException(500, "Error when retrieve company information", $this->_getErrors($requestmanager));
         }
 
-        //Search from in user
-        $sql = "SELECT rowid";
-        $sql .= " FROM " . MAIN_DB_PREFIX . "user";
-        $sql .= " WHERE office_phone = '" . $from_num_space . "' OR user_mobile = '" . $from_num_space . "'";
-        $sql .= " OR office_phone = '" . $from_num . "' OR user_mobile = '" . $from_num . "'";
-        $sql .= " OR office_phone = '" . $target_num_space . "' OR user_mobile = '" . $target_num_space . "'";
-        $sql .= " OR office_phone = '" . $target_num . "' OR user_mobile = '" . $target_num . "'";
+        // Search internal user
+        //---------------------------------------
+        $userid = 0;
+        //$userassigned = array();
+
+        $sql = "SELECT rowid AS userid";
+        $sql .= " FROM " . MAIN_DB_PREFIX . "requestmanager_internal_user_phone_book";
+        $sql .= " WHERE entity IN (".getEntity('user').")";
+        $sql .= " AND (";
+        $sql .= " office_phone = '" . $from_num . "'";
+        $sql .= " OR user_mobile = '" . $from_num . "'";
+        $sql .= " OR office_phone = '" . $target_num . "'";
+        $sql .= " OR user_mobile = '" . $target_num . "'";
+        $sql .= " )";
 
         $resql = self::$db->query($sql);
-        $userassigned = array();
         if ($resql) {
-            while ($obj = self::$db->fetch_object($resql)) {
-                $userassigned[] = $obj->rowid;
+            if ($obj = self::$db->fetch_object($resql)) {
+                $userid = $obj->userid;
             }
 
             self::$db->free($resql);
+        } else {
+            throw new RestException(500, "Error when retrieve internal user", self::$db->lasterror());
         }
-        $actioncomm->userassigned = $userassigned;
-        $actioncomm->userownerid = DolibarrApiAccess::$user->id;
 
-        $actioncomm->datep = dol_now();
-        $actioncomm->type_id = 1;
-        $actioncomm->type_code = "AC_TEL";
-        $actioncomm->note = "";
-        if (!empty($hour)) {
-            $actioncomm->note .= $langs->trans('API_hour') . $hour . "<br/>";
-        } else {
-            $actioncomm->note .= $langs->trans('API_hour') . self::$db->idate($now) . "<br/>";
+        if ($userid == 0) {
+            throw new RestException(404, "Internal user not found with phones: ".$from_num.", ".$target_num);
         }
 
-        $actioncomm->note .= $langs->trans('API_poste') . $poste . "<br/>";
-        $actioncomm->note .= $langs->trans('API_name_post') . $name_post . "<br/>";
-        $actioncomm->note .= $langs->trans('API_id_IPBX') . $id_IPBX . "<br/>";
-        $actioncomm->note .= $langs->trans('API_groupe') . $groupe . "<br/>";
-        $actioncomm->note .= $langs->trans('API_type') . $type . "<br/>";
-        $actioncomm->note .= $langs->trans('API_source') . $source . "<br/>";
-        $actioncomm->array_options = array("[options_ipbx]" => $id_IPBX);
+        require_once DOL_DOCUMENT_ROOT . '/comm/action/class/actioncomm.class.php';
+        $actioncomm = new ActionComm(self::$db);
 
-        // if ($this->requestmanager->create_event_api($actioncomm) < 0) {
-        //   throw new RestException(500, "Error creating event", array_merge(array($actioncomm->error), $actioncomm->errors));
-        // }
+        // Create event
+        //--------------------------------------------------
+        $langs->load('commercial');
+        $langs->load('requestmanager@requestmanager');
+        $actioncomm->type_code = "AC_TEL";
+        $actioncomm->label = $langs->trans('ActionAC_TEL') . ': ' . $type . ' - ' . $societe->getFullName($langs) . ' - ' . $langs->trans('ActionRunningShort');
+        // Todo calculer la date exacte
+        $actioncomm->location = (!empty($name_post) ? $name_post : '') . (!empty($poste) ? ' ( ' . $poste . ' )' : '');
+        $actioncomm->datep = $now;
+        $actioncomm->percentage = 50;
+        //$actioncomm->userassigned = $userassigned;
+        $actioncomm->socid = $socid;
+        $actioncomm->contactid = $contactid;
+        $actioncomm->userownerid = $userid;
+        $actioncomm->array_options = array("options_rm_ipbx" => $id);
+
+        // Message
+        //--------------------------------------------------
+        $message = $langs->trans('RequestManagerIPBXID', $id) . '<br/>';
+        if (!empty($poste)) $message .= $langs->trans('RequestManagerCallPost', $poste) . '<br/>';
+        if (!empty($name_post)) $message .= $langs->trans('RequestManagerCallPostName', $name_post) . '<br/>';
+        $message .= $langs->trans('RequestManagerCallerNumber', $caller_number) . '<br/>';
+        $message .= $langs->trans('RequestManagerCalledNumber', $called_number) . '<br/>';
+        $message .= $langs->trans('RequestManagerCallDirection', $type) . '<br/>';
+        if (!empty($groupe)) $message .= $langs->trans('RequestManagerAnswerGroupAtOriginCall', $groupe) . '<br/>';
+        if (!empty($source)) $message .= $langs->trans('RequestManagerCallOrigin', $source) . '<br/>';
+        $message .= $langs->trans('RequestManagerStartTimeCall', !empty($hour) ? $hour : dol_print_date($now, 'hour')) . '<br/>';
+        $actioncomm->note = $message;
+
+        if ($actioncomm->create(DolibarrApiAccess::$user) < 0) {
+            throw new RestException(500, "Error while creating the calling event", $this->_getErrors($actioncomm));
+        }
 
-        return $actioncomm;
+        return $actioncomm->id;
     }
    
     /**
-     *  Update an event following a phone call end
+     *  Close a calling event
+     *
+     * @url	PUT /call/{id}/ending
      *
-     * @param int      $id_IPBX        Id interne à l'IPBX de l'appel
-     * @param string   $state          État de l'appel : Décroché, non décroché, messagerie
-     * @param string   $hour           Heure de fin de l'appel  (renseigné par l'IPBX, si non renseigné fait par dolibarr)
-     * @param string   $during         Durée de la communication
-     * @param int      $messagerie     Si messagerie, id interne à l'IPBX du message
+     * @param   int         $id                 Id interne à l'IPBX de l'appel
+     * @param   string      $state              État de l'appel : Décroché, non décroché, messagerie
+     * @param   string      $hour               Heure de fin de l'appel  (renseigné par l'IPBX, si non renseigné fait par dolibarr)
+     * @param   string      $during             Durée de la communication
+     * @param   int         $messagerie         Si messagerie, id interne à l'IPBX du message
      *
-     * @url	GET /call/ending
+     * @return  int                             ID of the calling event
      *
-     * @return  object
+     * @throws  401         RestException       Insufficient rights
+     * @throws  404         RestException       Calling event not found with IPBX ID
+     * @throws  500         RestException       Error when retrieve calling event
+     * @throws  500         RestException       Error while closing the calling event
      */
-    function CallEnding($id_IPBX, $state, $hour='', $during='', $messagerie=NULL)
+    function CallEnding($id, $state, $hour='', $during='', $messagerie=NULL)
     {
         global $langs;
 
-        $now = dol_now();
+        if (!DolibarrApiAccess::$user->rights->agenda->myactions->create) {
+            throw new RestException(401, "Insufficient rights");
+        }
 
-        $langs->load('requestmanager@requestmanager');
+        $now = dol_now();
 
-        require_once DOL_DOCUMENT_ROOT . '/comm/action/class/actioncomm.class.php';
-        $actioncomm = new ActionComm(self::$db);
+        // Search calling event
+        //--------------------------------------------------
+        $actioncommid = 0;
 
-        //Search event
-        $sql = "SELECT rowid";
-        $sql .= " FROM " . MAIN_DB_PREFIX . "actioncomm AS a";
-        $sql .= " LEFT JOIN " . MAIN_DB_PREFIX . "actioncomm_extrafields AS ex ON ex.fk_object = a.rowid";
-        $sql .= " WHERE ex.ipbx = " . $id_IPBX;
+        $sql = "SELECT ac.id";
+        $sql .= " FROM " . MAIN_DB_PREFIX . "actioncomm AS ac";
+        $sql .= " LEFT JOIN " . MAIN_DB_PREFIX . "actioncomm_extrafields AS acef ON acef.fk_object = ac.id";
+        $sql .= " WHERE acef.rm_ipbx = " . $id;
 
         $resql = self::$db->query($sql);
         if ($resql) {
             if ($obj = self::$db->fetch_object($resql)) {
-                $actioncomm->fetch($obj->rowid);
+                $actioncommid = $obj->id;
+            }
 
-                $actioncomm->note .= $langs->trans('API_state') . $state . "<br/>";
-                if (!empty($hour)) {
-                    $actioncomm->note .= $langs->trans('API_hour_end') . $hour . "<br/>";
-                } else {
-                    $actioncomm->note .= $langs->trans('API_hour_end') . self::$db->idate($now) . "<br/>";
-                }
-                $actioncomm->note .= $langs->trans('API_during') . $during . "<br/>";
-                if (!empty($messagerie)) {
-                    $actioncomm->note .= $langs->trans('API_messagerie') . $messagerie . "<br/>";
-                }
+            self::$db->free($resql);
+        }
 
-                // if ($this->requestmanager->update_event_api($actioncomm) < 0) {
-                // throw new RestException(500, "Error creating event", array_merge(array($actioncomm->error), $actioncomm->errors));
-                // }
+        if ($actioncommid == 0) {
+            throw new RestException(404, "Calling event not found with IPBX ID: " . $id);
+        }
 
-                return $actioncomm;
-            }
+        require_once DOL_DOCUMENT_ROOT . '/comm/action/class/actioncomm.class.php';
+        $actioncomm = new ActionComm(self::$db);
+        if ($actioncomm->fetch($actioncommid) < 0) {
+            throw new RestException(500, "Error when retrieve calling event", $this->_getErrors($actioncomm));
         }
 
-        return [];
+        // Update event
+        //--------------------------------------------------
+        $langs->load('commercial');
+        $langs->load('requestmanager@requestmanager');
+        $actioncomm->label = str_replace(' - ' . $langs->trans('ActionRunningShort'), '' , $actioncomm->label) . ' ' . $langs->trans('RequestManagerHourFromTo', dol_print_date($actioncomm->datep, 'hour'), dol_print_date($now, 'hour'));
+        $actioncomm->percentage = 100;
+        // Todo calculer la date exacte et la durée exacte
+        $actioncomm->datef = $now;
+        $actioncomm->durationp = $now - $actioncomm->datep;
+
+        // Added ending message
+        //--------------------------------------------------
+        $message = '<br/>' . $langs->trans('RequestManagerCallStatus', $state) . '<br/>';
+        $message .= $langs->trans('RequestManagerEndTimeCall', !empty($hour) ? $hour : dol_print_date($now, 'hour')) . '<br/>';
+        $message .= $langs->trans('RequestManagerCallDuration', $during) . '<br/>';
+        if (!empty($messagerie)) $message .= $langs->trans('RequestManagerCallMessageID', $messagerie) . '<br/>';
+        $actioncomm->note = dol_concatdesc($actioncomm->note, $message);
+
+        if ($actioncomm->update(DolibarrApiAccess::$user) > 0) {
+            return $actioncomm->id;
+        } else {
+            throw new RestException(500, "Error while closing the calling event", $this->_getErrors($actioncomm));
+        }
     }
 
     /**
@@ -1217,5 +1258,4 @@ class RequestManagerApi extends DolibarrApi {
 
 	    return $errors;
     }
-    
 }
